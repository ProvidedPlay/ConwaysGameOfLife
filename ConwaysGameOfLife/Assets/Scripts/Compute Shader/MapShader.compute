// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitializeGameBoard
#pragma kernel UpdateGameBoard
#pragma kernel LoadLivingCellsFromCPU
#pragma kernel CompareCurrentCellsBufferToCPUSnapshot

struct ChangedCellData
{
    int2 position;
    int value;
};
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> MapRenderTexture;
//RWTexture2D<float> AllCellsGrid;
RWStructuredBuffer<uint> AllCellsBufferCPUSnapshot; // stores a snapshot of the game board (when the play button was last hit) as a 1 dimensional buffer, 
RWStructuredBuffer<uint> AllCellsBufferCurrent; // stores the current game board as a 1 dimensional buffer, 
RWStructuredBuffer<ChangedCellData> ChangedCellsBuffer; //stores cells changed between the current CellsBuffer and the CPU Snapshot CellsBuffer, to be given back to the CPU to update; stores their x,y positions
RWStructuredBuffer<uint> ChangedCellsCountBuffer; //a single element buffer that counts the number of changed cells in ChangedCellsBuffer
StructuredBuffer<int2> LivingCellsBuffer;

uint gameBoardWidth;
uint gameBoardHeight;

int numLivingCells;

uint GetLivingNeighborCount(uint x, uint y)
{
    uint livingNeighborCount = 0;

    // Check each neighbor (including diagonals)
    for (int i = -1; i <= 1; i++)
    {
        for (int j = -1; j <= 1; j++)
        {
            if (i == 0 && j == 0)
                continue; // Skip the center cell

            uint neighborXAxisPosition = x + i;
            uint neighborYAxisPosition = y + j;

            // Ensure we're within bounds
            if (neighborXAxisPosition < gameBoardWidth && neighborYAxisPosition < gameBoardHeight)//check if the cell is within bounds
            {
                int neighborIndex = neighborYAxisPosition * gameBoardWidth + neighborXAxisPosition;
                uint neighborState = AllCellsBufferCurrent[neighborIndex];
                livingNeighborCount += neighborState; // Count living neighbors
            }
        }
    }
    
    return livingNeighborCount;
}

//Kernel #0, InitializeGameBoard
[numthreads(16,16,1)]
void InitializeGameBoard(uint3 id : SV_DispatchThreadID) //For each pixel in the 2d texture AllCellsGrid (each value of x,y), sets the value of the cell to 0 (aka dead)
{
    uint x = id.x;
    uint y = id.y;
    if (x >= gameBoardWidth || y >= gameBoardHeight)//this makes sure that the compute shader doesnt go out of bounds, this is because the last batch of threads may have more threads (ie more x's and y's) than the board has cells.
    {
        return;
    }
    
    int cellIndex = y * gameBoardWidth + x; // flattens two dimensions into a single dimensional cellIndex. Every y value is the y*width's cell number (eg if it has a width of 11, the bottom left corner would be (0*11=0 +1) 1 in the index. The next line up where x=1 will be (1*11=11)+1 the 12th cell. 
    
    //read the current cellstate
    //uint cellstate = AllCellsBuffer[cellIndex];
    
    AllCellsBufferCPUSnapshot[cellIndex] = 0;
    AllCellsBufferCurrent[cellIndex] = 0;
    
    if (id.x == 0 && id.y == 0)//Only one thread needs to do this
    {
        ChangedCellsCountBuffer[0] = 0;
    }
    //LivingCellsBuffer[cellIndex] = 0;
    
    //Initialize the renderTexture as a clear board
    float4 cellColor = float4(0, 0, 0, 1);
    
    MapRenderTexture[id.xy] = cellColor;

}

//Kernel #1 UpdateGameBoard
[numthreads(16,16,1)]
void UpdateGameBoard(uint3 id : SV_DispatchThreadID)
{
    uint x = id.x;
    uint y = id.y;
    if (x >= gameBoardWidth || y >= gameBoardHeight)//this makes sure that the compute shader doesnt go out of bounds, this is because the last batch of threads may have more threads (ie more x's and y's) than the board has cells.
    {
        return;
    }
    
    int cellIndex = y * gameBoardWidth + x;
    
     //read the current cellstate
    uint cellState = AllCellsBufferCurrent[cellIndex];
    
    //Run GOL Code Here
    
    uint numberOfLivingNeighbors = GetLivingNeighborCount(x, y);
    
    if (cellState == 1) // Cell is alive
    {
        // Apply the survival rule: Cell survives if it has 2 or 3 neighbors
        if (numberOfLivingNeighbors < 2 || numberOfLivingNeighbors > 3)
        {
            AllCellsBufferCurrent[cellIndex] = 0; // Cell dies due to underpopulation/overpopulation
        }
    }
    else // Cell is dead
    {
        // Apply the birth rule: Cell becomes alive if it has exactly 3 neighbors
        if (numberOfLivingNeighbors == 3)
        {
            AllCellsBufferCurrent[cellIndex] = 1; // Cell becomes alive
        }
    }
    //update the rendertexture with the cell's new colour, white if dead, black if alive ( TODO change this to custom colours once implemented and working)!!!!
    float4 cellColor = cellState == 1? float4(255, 255, 255, 255) : float4(0,0,0,1);
    
    MapRenderTexture[id.xy] = cellColor;
}
//Kernel #1 LoadLivingCellsFromCPU
[numthreads(256, 1, 1)]
void LoadLivingCellsFromCPU(uint3 id : SV_DispatchThreadID)
{
    int i = id.x; 
    if (i >= numLivingCells)
    {
        return;
    }
    
    //retrieve the x,y position of the living cell
    int2 livingCellPosition = LivingCellsBuffer[i]; // Even though the data in LivingCellsBuffer was copied from a single dimensional array "livingCellsData[]" (where each even value was the x value and each consecutive odd value is a y value), since LivingCellsBuffer is an <int2> it automatically combines consecutive values its given to be the 'x' and 'y' values of a single int2 respectively, this recombining the 1d array into a 2d array automatically
    
    //flatten the (x,y) position to a 1d index holding both values for each indexed output value, this will be a 1 to 1 relation to the corresponding cell in our AllCellsBuffer
    int livingCellIndex = livingCellPosition.y * gameBoardWidth + livingCellPosition.x;
    
    //Set that cell as alive in AllCellsBuffer
    AllCellsBufferCPUSnapshot[livingCellIndex] = 1;
    AllCellsBufferCurrent[livingCellIndex] = 1;
    
    
}

[numthreads(16, 16, 1)]
void CompareCurrentCellsBufferToCPUSnapshot(uint3 id : SV_DispatchThreadID)
{
    uint x = id.x;
    uint y = id.y;

    if (x >= gameBoardWidth || y >= gameBoardHeight)
        return;

    uint currentCellIndex = y * gameBoardWidth + x;
    uint currentCellState = AllCellsBufferCurrent[currentCellIndex];
    uint snapshottedCellState = AllCellsBufferCPUSnapshot[currentCellIndex];

    // If the cell has changed, add it to ChangedCellsBuffer
    if (currentCellState != snapshottedCellState)
    {
        uint newChangedCellIndex;
        InterlockedAdd(ChangedCellsCountBuffer[0], 1, newChangedCellIndex); // Get the next available index; adds the 1 to the value of the current ChangedCellsCount (which is stored at element 0 of the ChangedCellsCountBuffer), then sets the newChangedCellIndex to that number
        ChangedCellsBuffer[newChangedCellIndex].position = int2(x, y); // Store the changed cell's position in the ChangedCellsBuffer, at the index determined by the value of newChangedCellIndex
        ChangedCellsBuffer[newChangedCellIndex].value = currentCellState; //store the changed cell's new state
    }
}
